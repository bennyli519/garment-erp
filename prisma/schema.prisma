// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        String
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String
  department    Department? @relation(fields: [departmentId], references: [id])
  departmentId  String?
  emailVerified DateTime?
  image         String?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  code        String       @unique
  description String?
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  code        String   @unique
  type        String   // menu, action, api
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Organization Structure
model Company {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  status      String      // active, inactive
  schemaName  String       @unique
  address     String?
  contact     String?
  phone       String?
  departments Department[]
  employees   Employee[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Department {
  id        String    @id @default(uuid())
  name      String
  code      String    @unique
  parentId  String?
  path      String
  level     Int
  status    String    // active, inactive
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  parent    Department?  @relation("DepartmentToParent", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentToParent")
  employees Employee[]
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Employee {
  id           String     @id @default(uuid())
  name         String
  code         String     @unique
  company      Company    @relation(fields: [companyId], references: [id])
  companyId    String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  position     String?
  phone        String?
  email        String?
  status       String     // active, inactive, resigned
  isActive     Boolean    @default(true)
  birthDate    DateTime?
  hireDate     DateTime
  resignDate   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Business Models
model Process {
  id              String            @id @default(uuid())
  name            String
  code            String            @unique
  shortName       String
  multiplier      Float
  basePrice       Float
  finalPrice      Float
  requirements    String?
  qualityNotes    String?
  description     String?
  standardTime    Float?
  status          String            // active, inactive
  remark          String?
  products        Product[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Product {
  id               String            @id @default(uuid())
  name             String
  code             String            @unique
  description      String?
  status           String            // draft, active, inactive
  brand            Brand             @relation(fields: [brandId], references: [id])
  brandId          String
  processes        Process[]
  variants         ProductVariant[]  // 产品变体（颜色和尺码组合）
  productionOrders ProductionOrder[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

// 产品变体（具体的颜色和尺码组合）
model ProductVariant {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  color       Color    @relation(fields: [colorId], references: [id])
  colorId     String
  size        Size     @relation(fields: [sizeId], references: [id])
  sizeId      String
  sku         String   @unique  // 库存单位
  stock       Int      @default(0)  // 库存数量
  price       Float?   // 价格
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, colorId, sizeId])
}

model Color {
  id          String           @id @default(uuid())
  name        String           @unique
  code        String           @unique
  hexCode     String?
  description String?
  status      String           // active, inactive
  variants    ProductVariant[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Size {
  id          String           @id @default(uuid())
  name        String           @unique
  code        String           @unique
  sizeType    String?
  order       Int?
  description String?
  variants    ProductVariant[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  code        String    @unique
  logo        String?
  description String?
  status      String    // active, inactive
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductionOrder {
  id          String   @id @default(uuid())
  code        String   @unique
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  status      String   // draft, confirmed, in_production, completed, cancelled
  startDate   DateTime?
  endDate     DateTime?
  remark      String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String   // create, update, delete
  resource    String
  resourceId  String
  details     Json
  createdAt   DateTime @default(now())
} 