---
description: 
globs: 
alwaysApply: true
---
@group("Admin Frontend")
@title("Admin Portal Frontend Guidelines")
@description("Admin Portal 前端开发规范和流程指南")
@version("1.0.0")
@author("Benny")
@tags(["frontend", "admin", "guidelines"])

# Admin Portal Frontend Guidelines

## 目录结构规范

```
admin/
├── components/          # 组件目录
│   ├── features/       # 业务功能组件
│   │   └── [feature]/  # 具体功能模块
│   │       ├── components/  # 功能相关组件
│   │       ├── hooks/      # 功能相关钩子
│   │       └── types.ts    # 类型定义
│   ├── layout/        # 布局组件
│   └── ui/           # 通用UI组件
├── pages/            # 页面组件
│   └── [module]/     # 模块页面
│       ├── page.tsx  # 页面组件
│       ├── components/ # 页面专用组件
│       └── hooks/     # 页面专用钩子
├── hooks/           # 全局钩子
├── stores/         # 状态管理
└── styles/         # 样式文件
```

@rule("file-naming")
### 命名规范

- **文件命名**：
  - 组件文件：使用 PascalCase（如 `UserList.tsx`）
  - 工具文件：使用 kebab-case（如 `auth-utils.ts`）
  - 样式文件：与组件同名，使用 `.module.css` 后缀
  - 类型文件：使用 `.types.ts` 后缀
  - 页面文件：统一使用 `page.tsx`

- **组件命名**：
  - 使用 PascalCase
  - 页面组件以 Page 结尾（如 `UserListPage`）
  - 容器组件以 Container 结尾（如 `UserListContainer`）
  - 通用组件使用明确的名称（如 `DataTable`, `SearchForm`）

@rule("component-structure")
### 组件开发规范

- **组件结构**：
  ```typescript
  'use client'  // 对于客户端组件必须添加

  // 导入顺序
  import { useState, useEffect } from 'react'     // React 核心
  import { useRouter } from 'next/navigation'     // Next.js
  import { Table, Form, Input } from 'antd'       // UI 库
  import { useUserData } from '@/hooks'           // 自定义 hooks
  import { UserService } from '@/services'        // 服务
  import type { User } from '@/types'             // 类型

  // 类型定义
  interface Props {
    // ...
  }

  // 组件实现
  export default function ComponentName({ ... }: Props) {
    // hooks 声明
    // 状态管理
    // 事件处理
    // 渲染逻辑
  }
  ```

@rule("page-structure")
### 页面组件规范

- **基本结构**：
  ```typescript
  'use client'

  import AdminLayout from '@/app/admin/components/layout/admin-layout'
  
  export default function PageName() {
    return (
      <AdminLayout>
        <div className="min-h-[calc(100vh-64px)]">
          {/* 页面内容 */}
        </div>
      </AdminLayout>
    )
  }
  ```

- **表单页面结构**：
  ```typescript
  <Card className="w-full max-w-md">
    <div className="text-center mb-8">
      <h1 className="text-2xl font-semibold">标题</h1>
      <p className="text-gray-600">描述文本</p>
    </div>
    
    <Form
      form={form}
      layout="vertical"
      onFinish={handleSubmit}
      requiredMark={false}
    >
      {/* 表单项 */}
    </Form>
  </Card>
  ```

@rule("form-validation")
### 表单验证规范

- **必填验证**：
  ```typescript
  rules={[
    { required: true, message: '请输入字段名' }
  ]}
  ```

- **密码验证**：
  ```typescript
  rules={[
    { required: true, message: '请输入密码' },
    { min: 8, message: '密码至少8个字符' },
    { 
      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/,
      message: '密码必须包含大小写字母和数字'
    }
  ]}
  ```

- **确认密码验证**：
  ```typescript
  rules={[
    { required: true, message: '请确认密码' },
    ({ getFieldValue }) => ({
      validator(_, value) {
        if (!value || getFieldValue('password') === value) {
          return Promise.resolve();
        }
        return Promise.reject(new Error('两次输入的密码不一致'));
      },
    }),
  ]}
  ```

@rule("api-integration")
### API 集成规范

- **请求处理**：
  ```typescript
  const handleSubmit = async (values: FormData) => {
    try {
      const response = await fetch('/api/endpoint', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(values),
      });

      if (!response.ok) {
        throw new Error('请求失败');
      }

      message.success('操作成功');
      router.push('/success-page');
    } catch (error) {
      message.error('操作失败，请重试');
    }
  };
  ```

@rule("error-handling")
### 错误处理规范

- **统一错误提示**：
  - 使用 Ant Design 的 message 组件
  - 提供清晰的错误信息
  - 适当的错误恢复机制

- **表单错误处理**：
  - 表单验证错误显示在字段下方
  - API 错误显示在表单顶部
  - 网络错误使用全局提示

@rule("styling")
### 样式规范

- **使用 Tailwind CSS**：
  - 遵循移动优先原则
  - 使用语义化的类名
  - 保持一致的间距和颜色

- **布局规范**：
  - 页面最小高度：`min-h-[calc(100vh-64px)]`
  - 居中布局：`flex items-center justify-center`
  - 卡片最大宽度：`max-w-md`

@rule("responsive-design")
### 响应式设计

- **断点设置**：
  - sm: 640px
  - md: 768px
  - lg: 1024px
  - xl: 1280px
  - 2xl: 1536px

- **响应式布局**：
  - 使用 Flexbox 和 Grid
  - 适配不同屏幕尺寸
  - 保持内容可读性

@rule("performance")
### 性能优化

- **组件优化**：
  - 使用 `useMemo` 和 `useCallback`
  - 避免不必要的重渲染
  - 合理拆分组件

- **资源优化**：
  - 图片懒加载
  - 代码分割
  - 缓存策略

@rule("accessibility")
### 可访问性

- **基本要求**：
  - 语义化 HTML
  - 键盘导航支持
  - 适当的颜色对比度
  - ARIA 属性支持

@rule("security")
### 安全考虑

- **数据安全**：
  - 敏感数据加密
  - CSRF 防护
  - XSS 防护
  - 输入验证

@rule("testing")
### 测试规范

- **单元测试**：
  - 测试组件渲染
  - 测试用户交互
  - 测试错误处理

- **集成测试**：
  - 测试页面流程
  - 测试 API 集成
  - 测试路由跳转
